@page "/beverages/{BeverageId:guid}/update"
@inject Client _client;

<h1 class="text-info">Update Beverage</h1>

<div class="row">
	<div class="col">
		@if (_beverageDto is not null)
		{
			<EditForm Model="_beverageDto" OnValidSubmit="Update">
				<DataAnnotationsValidator />
				<div class="form-group">
					<label>Beverage Name: </label>
					<div>
						<InputText class="form-control" @bind-Value="_beverageDto.Name" />
						<ValidationMessage For="(() => _beverageDto.Name)" />
					</div>
				</div>
				<label>Beverage Price: </label>
				<div>
					<InputNumber class="form-control" @bind-Value="_beverageDto.Price" />
					<ValidationMessage For="(() => _beverageDto.Price)" />
				</div>
				<button class="btn btn-outline-primary mt-3">Save</button>
			</EditForm>
		}

		@if (message is not null)
	   {
			<div class="alert alert-success text-center py-2 mt-3">@message</div>
	   }
	</div>
</div>

@code {
	[Parameter]
	public Guid BeverageId { get; set; }

	private UpdateBeverageDto _beverageDto;
	private string message;

	protected override async Task OnInitializedAsync()
	{
		var beverage = await _client.GetBeverageByIdAsync(BeverageId, "1");
		_beverageDto = new UpdateBeverageDto
			{
				Name = beverage.Name,
				Price = beverage.Price
			};
	}

	private async Task Update()
	{
		message = null;
		await _client.UpdateBeverageAsync(BeverageId, "1", _beverageDto);
		message = "Editing Success!";
	}
}